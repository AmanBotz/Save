# ---------------------------------------------------
# File Name: shrink.py
# Description: A Pyrogram bot for downloading files from Telegram channels or groups 
#              and uploading them back to Telegram.
# Author: Gagan
# GitHub: https://github.com/devgaganin/
# Telegram: https://t.me/team_spy_pro
# YouTube: https://youtube.com/@dev_gagan
# Created: 2025-01-11
# Last Modified: 2025-01-11
# Version: 2.0.5
# License: MIT License
# ---------------------------------------------------

from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import random
import requests
import string
import aiohttp
from devgagan import app
from devgagan.core.func import *
from datetime import datetime, timedelta
from motor.motor_asyncio import AsyncIOMotorClient
from config import MONGO_DB, WEBSITE_URL, AD_API, LOG_GROUP  
 
 
tclient = AsyncIOMotorClient(MONGO_DB)
tdb = tclient["telegram_bot"]
token = tdb["tokens"]
 
 
async def create_ttl_index():
    await token.create_index("expires_at", expireAfterSeconds=0)
 
 
Param = {}
 
 
async def generate_random_param(length=8):
    """generate a random parameter."""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=length))
 
 
async def get_shortened_url(deep_link):
    api_url = f"https://{WEBSITE_URL}/api?api={AD_API}&url={deep_link}"
 
    async with aiohttp.ClientSession() as session:
        async with session.get(api_url) as response:
            if response.status == 200:
                data = await response.json()   
                if data.get("status") == "success":
                    return data.get("shortenedUrl")
    return None
 
 
async def is_user_verified(user_id):
    """check if a user has an active session."""
    session = await token.find_one({"user_id": user_id})
    return session is not None
 
 
@app.on_message(filters.command("start"))
async def token_handler(client, message):
    """handle the /token command."""
    join = await subscribe(client, message)
    if join == 1:
        return
    chat_id = "amanbots"
    msg = await app.get_messages(chat_id, 9)
    user_id = message.chat.id
    if len(message.command) <= 1:
        image_url = "https://i.postimg.cc/mZ14QSBk/IMG-20250303-WA0005.jpg"
        join_button = InlineKeyboardButton(" ù·¥è…™…¥ ·¥Ñ ú·¥Ä…¥…¥·¥á ü", url="https://t.me/amanbots")
        premium = InlineKeyboardButton("…¢·¥á·¥õ ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç", url="https://t.me/amangodz")   
        keyboard = InlineKeyboardMarkup([
            [join_button],   
            [premium]    
        ])
         
        await message.reply_photo(
            msg.photo.file_id,
            caption=(
                " ú…™ üëã ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á, ·¥°·¥Ä…¥…¥·¥Ä …™…¥·¥õ Ä·¥è...?\n\n"
                "‚ú≥Ô∏è …™ ·¥Ñ·¥Ä…¥ Íú±·¥Ä·¥†·¥á ·¥ò·¥èÍú±·¥õÍú± Íú∞ Ä·¥è·¥ç ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú± ·¥è Ä …¢ Ä·¥è·¥ú·¥òÍú± ·¥° ú·¥á Ä·¥á Íú∞·¥è Ä·¥°·¥Ä Ä·¥Ö…™…¥…¢ …™Íú± ·¥èÍú∞Íú∞. …™ ·¥Ñ·¥Ä…¥ ·¥Ö·¥è·¥°…¥ ü·¥è·¥Ä·¥Ö ·¥†…™·¥Ö·¥á·¥èÍú±/·¥Ä·¥ú·¥Ö…™·¥è Íú∞ Ä·¥è·¥ç  è·¥õ, …™…¥Íú±·¥õ·¥Ä, ... Íú±·¥è·¥Ñ…™·¥Ä ü ·¥ò ü·¥Ä·¥õÍú∞·¥è Ä·¥çÍú±.\n"
                "‚ú≥Ô∏è Íú±…™·¥ç·¥ò ü è Íú±·¥á…¥·¥Ö ·¥õ ú·¥á ·¥ò·¥èÍú±·¥õ  ü…™…¥·¥ã ·¥èÍú∞ ·¥Ä ·¥ò·¥ú ô ü…™·¥Ñ ·¥Ñ ú·¥Ä…¥…¥·¥á ü. Íú∞·¥è Ä ·¥ò Ä…™·¥†·¥Ä·¥õ·¥á ·¥Ñ ú·¥Ä…¥…¥·¥á üÍú±, ·¥Ö·¥è /login. Íú±·¥á…¥·¥Ö /help ·¥õ·¥è ·¥ã…¥·¥è·¥° ·¥ç·¥è Ä·¥á."
            ),
            reply_markup=keyboard
        )
        return  
 
    param = message.command[1] if len(message.command) > 1 else None
    freecheck = await chk_user(message, user_id)
    if freecheck != 1:
        await message.reply(" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á Ä, …¥·¥è …¥·¥á·¥á·¥Ö ·¥è“ì ·¥õ·¥è·¥ã·¥á…¥ üòâ")
        return
 
    if param:
        if user_id in Param and Param[user_id] == param:
            await token.insert_one({
                "user_id": user_id,
                "param": param,
                "created_at": datetime.utcnow(),
                "expires_at": datetime.utcnow() + timedelta(hours=3),
            })
            del Param[user_id]   
            await message.reply("‚úÖ  è·¥è·¥ú  ú·¥Ä·¥†·¥á  ô·¥á·¥á…¥ ·¥†·¥á Ä…™Íú∞…™·¥á·¥Ö Íú±·¥ú·¥Ñ·¥Ñ·¥áÍú±Íú±Íú∞·¥ú ü ü è! ·¥á…¥·¥ä·¥è è  è·¥è·¥ú Ä Íú±·¥áÍú±Íú±…™·¥è…¥ Íú∞·¥è Ä …¥·¥áx·¥õ 3  ú·¥è·¥ú ÄÍú±.")
            return
        else:
            await message.reply("‚ùå …™…¥·¥†·¥Ä ü…™·¥Ö ·¥è Ä ·¥áx·¥ò…™ Ä·¥á·¥Ö ·¥†·¥á Ä…™Íú∞…™·¥Ñ·¥Ä·¥õ…™·¥è…¥  ü…™…¥·¥ã. ·¥ò ü·¥á·¥ÄÍú±·¥á …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á ·¥Ä …¥·¥á·¥° ·¥õ·¥è·¥ã·¥á…¥.")
            return
 
@app.on_message(filters.command("token"))
async def smart_handler(client, message):
    user_id = message.chat.id
     
    freecheck = await chk_user(message, user_id)
    if freecheck != 1:
        await message.reply(" è·¥è·¥ú ·¥Ä Ä·¥á ·¥Ä ·¥ò Ä·¥á·¥ç…™·¥ú·¥ç ·¥úÍú±·¥á Ä, …¥·¥è …¥·¥á·¥á·¥Ö ·¥è“ì ·¥õ·¥è·¥ã·¥á…¥ üòâ")
        return
    if await is_user_verified(user_id):
        await message.reply("‚úÖ  è·¥è·¥ú Ä Íú∞ Ä·¥á·¥á Íú±·¥áÍú±Íú±…™·¥è…¥ …™Íú± ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ä·¥Ñ·¥õ…™·¥†·¥á, ·¥á…¥·¥ä·¥è è!")
    else:
        param = await generate_random_param()
        Param[user_id] = param   
 
        deep_link = f"https://t.me/{client.me.username}?start={param}"
 
        shortened_url = await get_shortened_url(deep_link)
        if not shortened_url:
            await message.reply("‚ùå Íú∞·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥á ·¥õ ú·¥á ·¥õ·¥è·¥ã·¥á…¥  ü…™…¥·¥ã. ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥.")
            return
 
        button = InlineKeyboardMarkup(
            [[InlineKeyboardButton("·¥†·¥á Ä…™Íú∞ è ·¥õ ú·¥á ·¥õ·¥è·¥ã·¥á…¥ …¥·¥è·¥°...", url=shortened_url)]]
        )
        await message.reply(
            "·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥° ·¥õ·¥è ·¥†·¥á Ä…™Íú∞ è  è·¥è·¥ú Ä Íú∞ Ä·¥á·¥á ·¥Ä·¥Ñ·¥Ñ·¥áÍú±Íú± ·¥õ·¥è·¥ã·¥á…¥: \n\n> ·¥° ú·¥Ä·¥õ ·¥°…™ ü ü  è·¥è·¥ú …¢·¥á·¥õ ? \n1. …¥·¥è ·¥õ…™·¥ç·¥á  ô·¥è·¥ú…¥·¥Ö ·¥ú·¥ò·¥õ·¥è 3  ú·¥è·¥ú ÄÍú± \n2.  ô·¥Ä·¥õ·¥Ñ ú ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö  ü…™·¥ç…™·¥õ ·¥°…™ ü ü  ô·¥á Íú∞ Ä·¥á·¥á ü…™·¥ç…™·¥õ + 20 \n3. ·¥Ä ü ü Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥Íú± ·¥ú…¥ ü·¥è·¥Ñ·¥ã·¥á·¥Ö",
            reply_markup=button
        )
